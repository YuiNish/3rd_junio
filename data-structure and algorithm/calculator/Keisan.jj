options {
   STATIC = false;
}
PARSER_BEGIN(Parser)
package Calc;
import java.io.*;
import java.awt.event.*;
class Parser {
      private ActionListener listener;
      public void setActionListener(ActionListener a){
          listener = a;
      }
      private void output(double value){
          listener.actionPerformed(
               new ActionEvent(this,
                               ActionEvent.ACTION_PERFORMED,
                               String.valueOf(value)));
      }
      
}
PARSER_END(Parser)
TOKEN : {
    < NUM : (["1"-"9"])*(["0"-"9"])*("."(["0"-"9"])+)? >
  |  < PLUSOP : "+">
  |  < MULTIOP : "*">
  |  < SUBTOP : "-" >
  |  < DIVIOP : "/" >
  |  < EQOP : "=" >
}

SKIP : {
    " " | "\n" | "\r"
}

public void start() :
{
    Token token;
    double num = 0;
}
{ 
      (token = < NUM > { num = Double.parseDouble(token.image);
                 output(num);
                }
         ( < MULTIOP > token = < NUM > {
            num *= Double.parseDouble(token.image);
         	output(num);
         	}
         	| < DIVIOP > token = < NUM > {
         	  num /= Double.parseDouble(token.image);
            output(num);
         	}                  
    		| < PLUSOP > token = < NUM > {
    		  num += Double.parseDouble(token.image);
            output(num);
      	 		}
     		| < SUBTOP > token = < NUM > {
     		  num -= Double.parseDouble(token.image);
     		output(num);
     			}
     	       )*
    <EQOP> )*
}

////////////////////////////

/*
double Exp(): {
	double num1 = 0, num2 = 0;
}
{   
	num1 = MultiExp() (
		<PLUSOP> num2 = MultiExp() {
			num1 += num2;
		}
		| <SUBTOP> num2 = MultiExp() {
			num1 -= num2;
		}
	)* {
		return num1;
	}
}

double MultiExp(): {
	double num1 = 0, num2 = 0;
}
{
	num1 = PrimExp() (
		<MULTIOP> num2 = PrimExp() {
			num1 *= num2;
		}
		| <DIVIOP> num2 = PrimExp() {
			num1 /= num2;
		}
	)* {
		return num1;
	}
}

double PrimExp(): {
	Token token;
}
{
    token = < NUM > {
      return Double.parseDouble(token.image); }
    | 
	token = <DECINUM> {
		return Double.parseDouble(token.image);
	}
}
*/

/////////////////////


/*
public void start(): {
    Token token;
	double num;
}
{
	num = Exp() (
	  token = < NUM > { num = Double.parseDouble(token.image);
	  output(num);}
	| token = < DECINUM > { num = Double.parseDouble(token.image);
	output(num);}
	< EQOP > )*
}

double Exp(): {
	double num1, num2;
} {
	num1 = MultiExp() (
		<PLUSOP> num2 = MultiExp() {
			num1 += num2;
		}
		| <SUBTOP> num2 = MultiExp() {
			num1 -= num2;
		}
	)* {
		return num1;
	}
}

double MultiExp(): {
	double num1, num2;
} {
	num1 = PrimExp() (
		<MULTIOP> num2 = PrimExp() {
			num1 *= num2;
		}
		| <DIVIOP> num2 = PrimExp() {
			num1 /= num2;
		}
	)* {
		return num1;
	}
}

double PrimExp(): {
	Token token;
} {
	token = <DECINUM> {
		return Double.parseDouble(token.image);
	}
}*/

///////////////////////////////////

/*
public void start() :
{
  Token token;
  double n1;
  int num0;
}
{
  (    token = < NUM > { num0 = Integer.parseInt(token.image);
    	output(num0); }
   | token = < DECINUM > { n1 = Double.parseDouble(token.image);
   		output(n1);}
   		AddEx()
 < EQOP > )*
}

void AddEx():
{
  Token token1;
  double num11, num12;
}
{
  MultEx()(
    token1 = < PLUSOP > MultEx() {
      num11 += Double.parseDouble(token1.image); }
     | token1 = < SUBTOP > MultEx() {
      num12 -= Double.parseDouble(token1.image); }
  )* //{ return num }
}

void MultEx():
{
  Token token2;
  double num21, num22;
}
{
  token2 = < MULTIOP > Deci(){
    num21 *= Double.parseDouble(token2.image); }
	| token2 = < DIVIOP > Deci(){
	num22 /= Double.parseDouble(token2.image); }
    
}

void Deci():
{
  Token token3;
  double num3;
}
{
  token3 = < DECINUM > {
    num3 = Double.parseDouble(token3.image);
    output(num3);}
}*/